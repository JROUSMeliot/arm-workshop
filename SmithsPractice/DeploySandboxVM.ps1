<#
 .NOTES
    --------------------------------------------------------------------------------   
     Generated by:       Sean Hamilton
     Organization:       Smiths BIS
    --------------------------------------------------------------------------------
 .SYNOPSIS
    Deploys a template to Azure

 .DESCRIPTION
    Deploys an Azure Resource Manager template

 .PARAMETER subscriptionId
    The subscription id where the template will be deployed.

 .PARAMETER resourceGroupName
    The resource group where the template will be deployed. Can be the name of an existing or a new resource group.

 .PARAMETER resourceGroupLocation
    Optional, a resource group location. If specified, will try to create a new resource group in this location. If not specified, assumes resource group is existing.

 .PARAMETER deploymentName
    The deployment name.

 .PARAMETER templateFilePath
    Optional, path to the template file. Defaults to template.json.

 .PARAMETER parametersFilePath
    Optional, path to the parameters file. Defaults to parameters.json. If file is not found, will prompt for parameter values based on template.
    
Version 1.0 - February 26, 2019 Initial release

#>

param(

 <#
 [Parameter(Mandatory=$True)]
 [string]
 $deploymentName,
#>

 [string]
 $templateFilePath = "H:\PSCODE\Azure\SandboxVM.json",

 [string]
 $parametersFilePath = "H:\PSCODE\Azure\SandboxVM.parameters.json"
)

<#
.SYNOPSIS
    Registers RPs
#>
Function RegisterRP {
    Param(
        [string]$ResourceProviderNamespace
    )

    Write-Host "Registering resource provider '$ResourceProviderNamespace'";
    Register-AzureRmResourceProvider -ProviderNamespace $ResourceProviderNamespace;
}

# MAIN ##########################################################################################################################

$host.ui.RawUI.ForegroundColor = "Red"
$host.ui.RawUI.BackgroundColor = "Black"
Clear-Host

#aram ([string]$vm = $null)

$Error.Clear()

$logPath = "C:\PSCODE\Azure\DeploySandboxVM"

$Time=""
$Time=Get-Time
$logfile = $logPath + "\DeploySandboxVM_"+$Time.Date2+".log"
$errorlog = $logPath + "\DeploySandboxVM_ERRORS_"+$Time.Date2+".log"
#$outputfile = $logPath + "\DeploySandboxVM_Output_"+$Time.Date2+".CSV"
#$movedlogfile = $logPath + "\DeploySandboxVM_" + $Time.Date2 + ".log"
$ArchiveFolder = $logPath + "\DeploySandboxVM_ARCHIVE"

write-host " " -ForegroundColor Red -BackgroundColor Black
write-host "DeploySandboxVM v1.0" -ForegroundColor Red -BackgroundColor Black
write-host " " -ForegroundColor Red -BackgroundColor Black
Write-Host "Author: Sean Hamilton (sean.hamilton@smiths.com)" -ForegroundColor Red -BackgroundColor Black
write-host " " -ForegroundColor Red -BackgroundColor Black
Write-Host "Script will deploys the 'SandboxVM' template to the BIS Standalone IT Sandbox' Azure subscription." -ForegroundColor Red -BackgroundColor Black
write-host " " -ForegroundColor Red -BackgroundColor Black
write-host " " -ForegroundColor Red -BackgroundColor Black

if ((Test-Path -Path $logPath) -eq $false)
{
	$Error.Clear()
	try { New-Item -ItemType Directory -Force -Path $logPath -ErrorAction Stop -WarningAction Stop }
	catch { Terminate -message "Error creating $logPath folder." -file $null -efile $null -exitcode 1 -Display $true -FColor White -BColor Red }
}

LogIt -LogMessage "Importing module CommonFunctions." -Display $true -FColor Red -BColor Black -file $logfile
Import-Module CommonFunctions -ErrorAction Stop -WarningAction Stop
PadOutput -file $logfile

"DeploySandboxVM.ps1 executed. " + (Timestamp) | Out-File $logfile -Append

"Imported CommonFunctions module. " + (Timestamp) | Out-File $logfile -Append


if ((Test-Path -Path $ArchiveFolder) -eq $false)
{
	$Error.Clear()
	try { New-Item -ItemType Directory -Force -Path $ArchiveFolder -ErrorAction Stop -WarningAction Stop }
	catch { Terminate -message "Error creating $ArchiveFolder folder." -file $null -efile $null -exitcode 1 -Display $true -FColor White -BColor Red }
}

# import Azure module

PadOutput -file $logfile
LogIt -BColor Black -FColor Red -Display $true -file $logfile -LogMessage "Importing Azure module."

$Error.Clear()
try { Import-Module -Name Az -WarningAction Stop -ErrorAction Stop }
catch { Terminate -message "Error importing Azure module." -file $logfile -efile $errorlog -exitcode 1 -Display $true -FColor White -BColor Red }

PadOutput -file $logfile

<#
# import ImportExcel module
LogIt -BColor Black -FColor Red -Display $true -file $logfile -LogMessage "Importing ImportExcel module."

$Error.Clear()
try { Import-Module -Name ImportExcel -ErrorAction Inquire -WarningAction Inquire -Verbose }
catch { Terminate -message "Error importing ImportExcel module." -file $logfile -efile $errorlog -exitcode 2 -Display $true -FColor White -BColor Red }
#>

LogIt -BColor Black -FColor Red -Display $true -file $logfile -LogMessage "Logging in to Azure."

# Login-AzAccount
#$AZ | Get-Member | fl *

PadOutput -file $logfile

Select-AzSubscription -Subscription "BIS Standalone IT Sandbox" 

<#
write-host "Account" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.Account
write-host "Environment" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.Environment
write-host "Name" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.Name
write-host "Subscription" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.Subscription
write-host "Tenant" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.Tenant
write-host "TokenCache" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.TokenCache
write-host "VersionProfile" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.VersionProfile
write-host "ExtendedProperties" -BackgroundColor Black -ForegroundColor Cyan
$AZ.Context.ExtendedProperties
#>

#******************************************************************************
# Script body
# Execution begins here
#******************************************************************************

# Get the LogAnalytics key
# Get-AzOperationalInsightsWorkspace -ResourceGroupName zna3-bis-dev-logging-rg
# Get-AzOperationalInsightsWorkspaceSharedKeys -ResourceGroupName zna3-bis-dev-logging-rg -Name zna3-bis-dev-logging

$ErrorActionPreference = "Stop"

# Start the deployment
Write-Host "Starting deployment...";
New-AzResourceGroupDeployment -ResourceGroupName "zna1-bis-prd-dc-rg" -TemplateFile $templateFilePath -TemplateParameterFile $parametersFilePath;
